# SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: Apache-2.0

# Default values for ran-simulator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

##  Global parameters
## Please, note that this will override the parameters, including dependencies, configured to use the global value
##
global:
  imagePullSecrets:
    # -- Global Docker registry secret names as an array
    - name: ran-simulator-private-repo
  # -- If it is enabled, create new image pull secret
  createImagePullSecret: true
  # -- The name of the image pull secret to be created
  createdImagePullSecretName: ran-simulator-private-repo
  # -- Use Openshift Certified images for tests
  openshiftCertTests: false

imageCredentials:
  # -- Nfvri image registry
  registry: "https://europe-docker.pkg.dev/nfv-ri/images"
  # -- Username for nfvri image registry
  username: "_json_key"
  # -- Password for nfvri image registry
  password: "Contact nfvri team to provide the password"
  # -- Email for nfvri image registry
  email: "user@example.com"
replicaCount: 1

image:
  registry: "europe-docker.pkg.dev/nfv-ri/images"
  repository: ran-simulator
  tag: "test"
  pullPolicy: IfNotPresent

googleApiKey: "YOUR_API_KEY_HERE"

nameOverride: ""
fullnameOverride: "ran-simulator"

store: {}

ingress:
  enabled: false

service:
  type: ClusterIP

pci:
  modelName: "model"
  metricName: "metrics"

mobility:
  # hoLogic: "mho"
  hoLogic: "local"

servicemodels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

logging:
  loggers:
    root:
      level: info
      output:
        stdout:
          sink: stdout
  sinks:
    stdout:
      type: stdout
      stdout: {}
